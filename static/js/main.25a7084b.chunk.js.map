{"version":3,"sources":["components/SearchBar.js","components/apis/youtube.js","components/VideoItem.js","components/VideoList.js","components/VideoDetail.js","components/App.js","index.js"],"names":["SearchBar","state","term","onInputChange","event","_this","setState","target","value","onFormSubmit","preventDefault","props","react_default","a","createElement","className","onSubmit","this","type","onChange","placeholder","Component","axios","create","baseURL","params","part","maxResults","key","VideoItem","_ref","video","onVideoSelect","onClick","src","snippet","thumbnails","medium","url","alt","title","VideoList","videos","renderedList","map","console","log","src_components_VideoItem","id","videoId","VideoDetail","videoSrc","concat","description","App","selectedVideo","onTermSubmit","_callee","response","regenerator_default","wrap","_context","prev","next","youtube","get","q","sent","data","items","stop","style","marginTop","components_SearchBar","components_VideoDetail","components_VideoList","ReactDOM","render","components_App","document","getElementById"],"mappings":"yPAqCeA,6MAjCXC,MAAQ,CACJC,KAAM,MAGVC,cAAgB,SAACC,GAEbC,EAAKC,SAAS,CAAEJ,KAAME,EAAMG,OAAOC,WAGvCC,aAAe,SAACL,GAEZA,EAAMM,iBAKNL,EAAKM,MAAMF,aAAaJ,EAAKJ,MAAMC,+EAInC,OACIU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAUC,SAAUC,KAAKR,cACrCG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOV,MAAOS,KAAKhB,MAAMC,KAAMiB,SAAUF,KAAKd,cAAeiB,YAAY,wBA3BrFC,qBCYTC,WAAMC,OAAO,CAExBC,QAAS,wCACTC,OAAQ,CACJC,KAAM,UACNC,WAAY,EACZC,IATI,6CCOGC,SAfG,SAAAC,GAA4B,IAA1BC,EAA0BD,EAA1BC,MAAOC,EAAmBF,EAAnBE,cAGvB,OACIpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBkB,QAAS,kBAAMD,EAAcD,KAC1DnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWmB,IAAKH,EAAMI,QAAQC,WAAWC,OAAOC,IAAKC,IAAKR,EAAMI,QAAQK,QACvF5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACVgB,EAAMI,QAAQK,WCYpBC,EAnBG,SAAAX,GAA6B,IAA3BY,EAA2BZ,EAA3BY,OAAQV,EAAmBF,EAAnBE,cAGlBW,EAAeD,EAAOE,IAAI,SAACb,GAG7B,OAFAc,QAAQC,IAAIf,GAGRnB,EAAAC,EAAAC,cAACiC,EAAD,CAAWhB,MAAOA,EAAOC,cAAeA,EAAeJ,IAAKG,EAAMiB,GAAGC,YAK7E,OACIrC,EAAAC,EAAAC,cAAA,WACK6B,ICOEO,EAvBK,SAAApB,GAAe,IAAZC,EAAYD,EAAZC,MAEnB,IAAKA,EACD,OAAOnB,EAAAC,EAAAC,cAAA,yBAIX,IAAMqC,EAAQ,iCAAAC,OAAoCrB,EAAMiB,GAAGC,SAE3D,OACIrC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,UAAQoB,IAAKiB,EAAUX,MAAM,kBAGjC5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAagB,EAAMI,QAAQK,OACzC5B,EAAAC,EAAAC,cAAA,SAAIiB,EAAMI,QAAQkB,gBCoEnBC,6MAlEXrD,MAAQ,CACJyC,OAAQ,GACRa,cAAe,QAmBnBC,mDAAe,SAAAC,EAAOvD,GAAP,IAAAwD,EAAA,OAAAC,EAAA9C,EAAA+C,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAGYC,EAAQC,IAAI,UAAW,CAE1CxC,OAAQ,CACJyC,EAAGhE,KANA,OAGLwD,EAHKG,EAAAM,KAWX9D,EAAKC,SAAS,CACVoC,OAAQgB,EAASU,KAAKC,MACtBd,cAAeG,EAASU,KAAKC,MAAM,KAb5B,wBAAAR,EAAAS,SAAAb,8DAkBfzB,cAAgB,SAACD,GAEb1B,EAAKC,SAAS,CACViD,cAAexB,wFA9BnBd,KAAKuC,aAAa,yCAmClB,OACI5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAewD,MAAO,CAACC,UAAW,SAC7C5D,EAAAC,EAAAC,cAAC2D,EAAD,CAAWhE,aAAcQ,KAAKuC,eAE9B5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAC4D,EAAD,CAAa3C,MAAOd,KAAKhB,MAAMsD,iBAEnC3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAC6D,EAAD,CAAWjC,OAAQzB,KAAKhB,MAAMyC,OAAQV,cAAef,KAAKe,2BA3DpEX,aCdlBuD,IAASC,OACLjE,EAAAC,EAAAC,cAACgE,EAAD,MACAC,SAASC,eAAe","file":"static/js/main.25a7084b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass SearchBar extends Component {\n\n    state = {\n        term: ''\n    }\n\n    onInputChange = (event) => {\n        // update state\n        this.setState({ term: event.target.value })\n    }\n\n    onFormSubmit = (event) => {\n        // prevent browser refresh\n        event.preventDefault(); \n        \n        // callback from parent component \n        // get props from parent (App) component and pass in search term\n        //  back to parent component\n        this.props.onFormSubmit(this.state.term); \n    }\n\n    render() {\n        return(\n            <div className=\"search-bar ui segment\">\n                <form className=\"ui form\" onSubmit={this.onFormSubmit}>\n                    <div className=\"field\">\n                        <label>Video Name</label>\n                        <input type=\"text\" value={this.state.term} onChange={this.onInputChange} placeholder=\"Search...\" />\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar; ","import axios from 'axios';\n\n// API keys\n/**\n * Note: API keys are provided to store on user's browser. In this case, I have \n *  configured the restriction to allow only locahost:3000 to access\n *  this API key. \n *  To change or add more: Credentials ---> API key 1 under API Keys  \n *  Documentation: \n *      https://developers.google.com/youtube/v3/docs/search/list\n */\nconst KEY = \"AIzaSyADpdX5XZCI55HAbzp0LssOWL82Sl9fOVQ\";\n\n// make preconfig with default url and parameters \nexport default axios.create({\n    // youtube http request linke \n    baseURL: \"https://www.googleapis.com/youtube/v3\",\n    params: {\n        part: \"snippet\",\n        maxResults: 5,\n        key: KEY\n    }\n});","import React from 'react';\nimport './VideoItem.css'; \n                    // destructoring \nconst VideoItem = ({video, onVideoSelect}) => {\n\n\n    return (\n        <div className=\"video-item item\" onClick={() => onVideoSelect(video)}>\n            <img className=\"ui image\" src={video.snippet.thumbnails.medium.url} alt={video.snippet.title} />\n            <div className=\"content\">\n                <div className=\"header\">\n                    {video.snippet.title}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default VideoItem;","import React from 'react';\nimport VideoItem from './VideoItem';\n\n                    // destructoring\nconst VideoList = ({videos, onVideoSelect}) => {\n\n    // map each object \n    const renderedList = videos.map((video) => {\n        console.log(video);\n        // passing props to child (VideoItem) component \n        return(\n            <VideoItem video={video} onVideoSelect={onVideoSelect} key={video.id.videoId} />    \n        )\n    })\n\n    // print out render list \n    return (\n        <div>\n            {renderedList}\n        </div>\n    )\n}\n\nexport default VideoList; ","import React from 'react';\n\nconst VideoDetail = ({ video }) => {\n    // check if there is no video\n    if (!video) {\n        return <div>Loading...</div>\n    }\n\n    // source link for iframe and use template string to reference the id \n    const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`; \n\n    return(\n        <div>\n            <div className=\"ui embed\">\n                <iframe src={videoSrc} title=\"Video Player\" />\n            </div>\n            \n            <div className=\"ui segment\">\n                <h4 className=\"ui header\">{video.snippet.title}</h4>\n                <p>{video.snippet.description}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default VideoDetail;","/***\n * \n * The app is using Youtube API via Google when signed in and created a project.\n *  I have named the project called Video Browser. Below is a link to check the\n *  project that created. \n *  https://console.developers.google.com/\n *  We can do a search on any API. In this app, we're using YouTube Data API v3.\n *  To use the API, we need to first Enable it, then create credentials.\n * \n */\n\nimport React, { Component } from 'react';\nimport SearchBar from './SearchBar';\n// Youtube \nimport youtube from './apis/youtube';\nimport VideoList from './VideoList';\nimport VideoDetail from './VideoDetail';\n\n\nclass App extends Component { \n\n    state = {\n        videos: [],\n        selectedVideo: null\n    }\n\n    /***\n     * We want to default the video when the page is initially loaded \n     *  to the screen\n     * \n     */\n    componentDidMount() {\n        // passing the default search term\n        this.onTermSubmit('cars'); \n    }\n\n    /***\n     * Note: any time we make async operation, we have to interact with\n     *  it using either promises or the async await syntax. \n     * \n     */\n    // callback function to retrieve props from child component (SearchBar)\n    onTermSubmit = async (term) => {\n        \n        // Youtube request \n        const response = await youtube.get('/search', {\n            // passing parameters\n            params: {   // 'q' means query \n                q: term\n            }\n        });\n\n        // update state\n        this.setState({ \n            videos: response.data.items,\n            selectedVideo: response.data.items[0]   // set the first video \n        })\n    }\n\n    // callback function to retrieve the selected video from child component \n    onVideoSelect = (video) => {\n        // update state\n        this.setState({\n            selectedVideo: video\n        })\n    }\n\n    render() {\n        return(\n            <div className=\"ui container\" style={{marginTop: '10px'}}> \n                <SearchBar onFormSubmit={this.onTermSubmit} />\n                \n                <div className=\"ui grid\">\n                    <div className=\"ui row\">\n                        <div className=\"eleven wide column\">\n                            <VideoDetail video={this.state.selectedVideo} />\n                        </div>\n                        <div className=\"five wide column\">\n                            <VideoList videos={this.state.videos} onVideoSelect={this.onVideoSelect} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App; ","import React from 'react'\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}